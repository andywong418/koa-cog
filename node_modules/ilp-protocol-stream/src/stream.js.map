{"version":3,"file":"stream.js","sourceRoot":"","sources":["stream.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Debug from 'debug'\nimport BigNumber from 'bignumber.js'\nimport { Duplex } from 'stream'\nimport { DataQueue } from './util/data-queue'\nimport { OffsetSorter } from './util/data-offset-sorter'\nrequire('source-map-support').install()\n\nexport interface StreamOpts {\n  id: number,\n  isServer: boolean\n}\n\n/**\n * Class used to send money and data over a [Connection]{@link Connection}.\n *\n * This exposes the Node [Duplex Stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_class_stream_duplex) interface for sending data,\n * as well as additional functions for sending money.\n */\nexport class DataAndMoneyStream extends Duplex {\n  readonly id: number\n\n  /** @private */\n  _errorMessage?: string\n  /** @private */\n  _remoteClosed: boolean\n  /** @private */\n  _remoteReceiveMax: BigNumber\n  /** @private */\n  _remoteReceived: BigNumber\n  /** @private */\n  _remoteMaxOffset: number\n  /** @private */\n  _sentEnd: boolean\n  /** @private */\n  _remoteSentEnd: boolean\n\n  protected debug: Debug.IDebugger\n  protected isServer: boolean\n\n  protected _totalSent: BigNumber\n  protected _totalReceived: BigNumber\n  protected _sendMax: BigNumber\n  protected _receiveMax: BigNumber\n  protected _outgoingHeldAmount: BigNumber\n\n  protected closed: boolean\n  protected holds: { [id: string]: BigNumber }\n\n  protected _incomingData: OffsetSorter\n  protected _outgoingData: DataQueue\n  protected _outgoingDataToRetry: { data: Buffer, offset: number }[]\n  protected outgoingOffset: number\n  protected bytesRead: number\n\n  constructor (opts: StreamOpts) {\n    super()\n    this.id = opts.id\n    this.isServer = opts.isServer\n    this.debug = Debug(`ilp-protocol-stream:${this.isServer ? 'Server' : 'Client'}:Stream:${this.id}`)\n    this.debug('new stream created')\n\n    this._totalSent = new BigNumber(0)\n    this._totalReceived = new BigNumber(0)\n    this._sendMax = new BigNumber(0)\n    this._receiveMax = new BigNumber(0)\n    this._outgoingHeldAmount = new BigNumber(0)\n\n    this._sentEnd = false\n    this._remoteSentEnd = false\n    this.closed = false\n    this.holds = {}\n\n    this._incomingData = new OffsetSorter()\n    this._outgoingData = new DataQueue()\n    // TODO we might want to merge this with the _outgoingData queue data structure\n    this._outgoingDataToRetry = []\n    this.outgoingOffset = 0\n    this.bytesRead = 0\n\n    this._remoteClosed = false\n    this._remoteReceived = new BigNumber(0)\n    this._remoteReceiveMax = new BigNumber(Infinity)\n    // TODO should we have a different default?\n    this._remoteMaxOffset = 16384 // 16kb\n  }\n\n  /**\n   * Total amount sent so far, denominated in the connection plugin's units.\n   */\n  get totalSent (): string {\n    return this._totalSent.toString()\n  }\n\n  /**\n   * Total amount received so far, denominated in the connection plugin's units.\n   */\n  get totalReceived (): string {\n    return this._totalReceived.toString()\n  }\n\n  /**\n   * The current limit up to which the stream will try to send, denominated in the connection plugin's units.\n   * (If the `sendMax` is greater than the `totalSent`, the stream will continue to send the difference)\n   */\n  get sendMax (): string {\n    return this._sendMax.toString()\n  }\n\n  /**\n   * The current limit up to which the stream will try to send, denominated in the connection plugin's units.\n   * (If the `receiveMax` is greater than the `totalReceived`, the stream will continue to receive money when the other side sends it)\n   */\n  get receiveMax (): string {\n    return this._receiveMax.toString()\n  }\n\n  /**\n   * Number of bytes buffered and waiting to be read\n   *\n   * This property exists on streams after Node 9.4 so it is added here for backwards compatibility\n   */\n  get readableLength (): number {\n    // stream.readableLength was only added in Node v9.4.0\n    const readableLength = super.readableLength || (this['_readableState'] && this['_readableState'].length) || 0\n    return readableLength + this._incomingData.byteLength()\n  }\n\n  /**\n   * Number of bytes buffered and waiting to be sent\n   *\n   * This property exists on streams after Node 9.4 so it is added here for backwards compatibility\n   */\n  get writableLength (): number {\n    // stream.readableLength was only added in Node v9.4.0\n    const writableLength = super.writableLength || (this['_writableState'] && this['_writableState'].length) || 0\n    return writableLength + this._outgoingData.byteLength()\n  }\n\n  /**\n   * Returns true if the stream is open for sending and/or receiving.\n   */\n  isOpen (): boolean {\n    return !this.closed\n  }\n\n  /**\n   * Set the total amount this stream will send, denominated in the connection plugin's units.\n   * Note that this is absolute, not relative so calling `setSendMax(100)` twice will only send 100 units.\n   */\n  setSendMax (limit: BigNumber.Value): void {\n    if (this.closed) {\n      throw new Error('Stream already closed')\n    }\n    const sendMax = new BigNumber(limit)\n    if (this._totalSent.isGreaterThan(sendMax)) {\n      this.debug(`cannot set sendMax to ${sendMax} because we have already sent: ${this._totalSent}`)\n      throw new Error(`Cannot set sendMax lower than the totalSent`)\n    }\n    if (!sendMax.isFinite()) {\n      throw new Error('sendMax must be finite')\n    }\n    this.debug(`setting sendMax to ${sendMax}`)\n    this._sendMax = sendMax\n    this.emit('_maybe_start_send_loop')\n  }\n\n  /**\n   * Event fired when money is received\n   * @event money\n   * @type {string} Amount of money received, encoded as a string to avoid loss of precision\n   */\n\n  /**\n   * Set the total amount this stream will receive, denominated in the connection plugin's units.\n   * Note that this is absolute, not relative so calling `setReceiveMax(100)` twice will only let the stream receive 100 units.\n   * @fires money\n   */\n  setReceiveMax (limit: BigNumber.Value): void {\n    if (this.closed) {\n      throw new Error('Stream already closed')\n    }\n    if (this._totalReceived.isGreaterThan(limit)) {\n      this.debug(`cannot set receiveMax to ${limit} because we have already received: ${this._totalReceived}`)\n      throw new Error(`Cannot set receiveMax lower than the totalReceived`)\n    }\n    this.debug(`setting receiveMax to ${limit}`)\n    this._receiveMax = new BigNumber(limit)\n    this.emit('_maybe_start_send_loop')\n  }\n\n  /**\n   * Set the total amount the stream will send and wait for that amount to be sent.\n   * Note that this is absolute, not relative so calling `sendTotal(100)` twice will only send 100 units.\n   *\n   * This promise will only resolve when the absolute amount specified is reached, so lowering the `sendMax` may cause this not to resolve.\n   */\n  async sendTotal (limit: BigNumber.Value): Promise<void> {\n    if (this._totalSent.isGreaterThanOrEqualTo(limit)) {\n      this.debug(`already sent ${this._totalSent}, not sending any more`)\n      return Promise.resolve()\n    }\n\n    this.setSendMax(limit)\n    await new Promise((resolve, reject) => {\n      const self = this\n      function outgoingHandler () {\n        if (self._totalSent.isGreaterThanOrEqualTo(limit)) {\n          cleanup()\n          resolve()\n        }\n      }\n      function endHandler () {\n        cleanup()\n        if ((self._totalSent.isGreaterThanOrEqualTo(limit))) {\n          resolve()\n        } else {\n          self.debug(`Stream was closed before desired amount was sent (target: ${limit}, totalSent: ${self._totalSent})`)\n          reject(new Error(`Stream was closed before desired amount was sent (target: ${limit}, totalSent: ${self._totalSent})`))\n        }\n      }\n      function errorHandler (err: Error) {\n        self.debug('error waiting for stream to stabilize:', err)\n        cleanup()\n        reject(err)\n      }\n      function cleanup () {\n        self.removeListener('outgoing_money', outgoingHandler)\n        self.removeListener('error', errorHandler)\n        self.removeListener('end', endHandler)\n      }\n\n      this.on('outgoing_money', outgoingHandler)\n      this.once('error', errorHandler)\n      this.once('end', endHandler)\n    })\n  }\n\n  /**\n   * Set the total amount the stream will receive and wait for that amount to be received.\n   * Note that this is absolute, not relative so calling `receiveTotal(100)` twice will only receive 100 units.\n   *\n   * This promise will only resolve when the absolute amount specified is reached, so lowering the `receiveMax` may cause this not to resolve.\n   */\n  async receiveTotal (limit: BigNumber.Value): Promise<void> {\n    if (this._totalReceived.isGreaterThanOrEqualTo(limit)) {\n      this.debug(`already received ${this._totalReceived}, not waiting for more`)\n      return Promise.resolve()\n    }\n\n    this.setReceiveMax(limit)\n    await new Promise((resolve, reject) => {\n      const self = this\n      function moneyHandler () {\n        if (self._totalReceived.isGreaterThanOrEqualTo(limit)) {\n          cleanup()\n          resolve()\n        }\n      }\n      function endHandler () {\n        cleanup()\n        if (self._totalReceived.isGreaterThanOrEqualTo(limit)) {\n          resolve()\n        } else {\n          self.debug(`Stream was closed before desired amount was received (target: ${limit}, totalReceived: ${self._totalReceived})`)\n          reject(new Error(`Stream was closed before desired amount was received (target: ${limit}, totalReceived: ${self._totalReceived})`))\n        }\n      }\n      function errorHandler (err: Error) {\n        self.debug('error waiting for stream to stabilize:', err)\n        cleanup()\n        reject(err)\n      }\n      function cleanup () {\n        self.removeListener('money', moneyHandler)\n        self.removeListener('error', errorHandler)\n        self.removeListener('end', endHandler)\n      }\n\n      this.on('money', moneyHandler)\n      this.once('error', errorHandler)\n      this.once('end', endHandler)\n    })\n  }\n\n  /**\n   * (Internal) Determine how much more the stream can receive\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _getAmountStreamCanReceive (): BigNumber {\n    return this._receiveMax.minus(this._totalReceived)\n  }\n\n  /**\n   * (Internal) Add money to the stream (from an external source)\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _addToIncoming (amount: BigNumber): void {\n    this._totalReceived = this._totalReceived.plus(amount)\n    this.debug(`received ${amount} (totalReceived: ${this._totalReceived})`)\n    this.emit('money', amount.toString())\n  }\n\n  /**\n   * (Internal) Check how much is available to send\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _getAmountAvailableToSend (): BigNumber {\n    if (this.closed) {\n      return new BigNumber(0)\n    }\n    const amountAvailable = this._sendMax.minus(this._totalSent).minus(this._outgoingHeldAmount)\n    return BigNumber.maximum(amountAvailable, 0)\n  }\n\n  /**\n   * (Internal) Hold outgoing balance\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _holdOutgoing (holdId: string, maxAmount?: BigNumber): BigNumber {\n    const amountAvailable = this._getAmountAvailableToSend()\n    const amountToHold = (maxAmount ? BigNumber.minimum(amountAvailable, maxAmount) : amountAvailable)\n    if (amountToHold.isGreaterThan(0)) {\n      this._outgoingHeldAmount = this._outgoingHeldAmount.plus(amountToHold)\n      this.holds[holdId] = amountToHold\n      this.debug(`holding outgoing balance. holdId: ${holdId}, amount: ${amountToHold}`)\n    }\n    return amountToHold\n  }\n\n  /**\n   * (Internal) Execute hold when money has been successfully transferred\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _executeHold (holdId: string): void {\n    if (!this.holds[holdId]) {\n      return\n    }\n    const amount = this.holds[holdId]\n    this._outgoingHeldAmount = this._outgoingHeldAmount.minus(amount)\n    this._totalSent = this._totalSent.plus(amount)\n    delete this.holds[holdId]\n    this.debug(`executed holdId: ${holdId} for: ${amount}`)\n    this.emit('outgoing_money', amount.toString())\n\n    if (this._totalSent.isGreaterThanOrEqualTo(this._sendMax)) {\n      this.debug('outgoing total sent')\n      this.emit('outgoing_total_sent')\n    }\n  }\n\n  /**\n   * (Internal) Cancel hold if sending money failed\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _cancelHold (holdId: string): void {\n    if (!this.holds[holdId]) {\n      return\n    }\n    const amount = this.holds[holdId]\n    this.debug(`cancelled holdId: ${holdId} for: ${amount}`)\n    this._outgoingHeldAmount = this._outgoingHeldAmount.minus(amount)\n    delete this.holds[holdId]\n  }\n\n  /**\n   * (Called internally by the Node Stream when the stream ends)\n   * @private\n   */\n  _final (callback: (...args: any[]) => void): void {\n    this.debug('stream is closing')\n    // TODO should we emit the event (or return a promise that resolves)\n    // after we're done sending all the queued data and money?\n    if (!this._sentEnd && !this._remoteSentEnd) {\n      this.debug('starting another send loop to tell the peer the stream was closed')\n      this.emit('_maybe_start_send_loop')\n    }\n    const finish = (err?: Error) => {\n      if (err) {\n        this.debug(`error waiting for money to be sent:`, err)\n      }\n      this.debug('stream ended')\n      this.closed = true\n      if (this.bytesRead === 0) {\n        // Node streams only emit the 'end' event if data was actually read\n        this.safeEmit('end')\n      }\n      this.safeEmit('close')\n      callback(err)\n    }\n\n    if (this._remoteSentEnd || this._sendMax.isLessThanOrEqualTo(this._totalSent)) {\n      finish()\n    } else {\n      this.debug('waiting to finish sending money before ending stream')\n\n      new Promise((resolve, reject) => {\n        this.once('outgoing_total_sent', resolve)\n        this.once('_send_loop_finished', resolve)\n        this.once('error', (error: Error) => reject(error))\n      })\n      .then(() => finish())\n      .catch(finish)\n    }\n  }\n\n  /**\n   * (Called internally by the Node Stream when stream.destroy is called)\n   * @private\n   */\n  _destroy (error: Error | undefined | null, callback: (...args: any[]) => void): void {\n    let emittedClose = false\n    this.once('close', () => {\n      emittedClose = true\n    })\n    this.debug('destroying stream because of error:', error)\n    this.closed = true\n    if (error) {\n      this._errorMessage = error.message\n    }\n    if (this.bytesRead === 0) {\n      // Node streams only emit the 'end' event if data was actually read\n      this.safeEmit('end')\n    }\n    // Only emit the 'close' event if the stream doesn't automatically\n    setImmediate(() => {\n      if (!emittedClose) {\n        this.safeEmit('close')\n      }\n    })\n    callback(error)\n  }\n\n  /**\n   * (Called internally by the Node Stream when stream.write is called)\n   * @private\n   */\n  _write (chunk: Buffer, encoding: string, callback: (...args: any[]) => void): void {\n    this.debug(`${chunk.length} bytes written to the outgoing data queue`)\n    this._outgoingData.push(chunk)\n    this.emit('_maybe_start_send_loop')\n    callback()\n  }\n\n  /**\n   * (Called internally by the Node Stream when stream.read is called)\n   * @private\n   */\n  _read (size: number): void {\n    const data = this._incomingData.read()\n    if (!data) {\n      return\n    }\n    this.bytesRead += data.length\n    this.push(data)\n    if (data.length < size) {\n      this._read(size - data.length)\n    }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _hasDataToSend (): boolean {\n    return !this._outgoingData.isEmpty()\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _getAvailableDataToSend (size: number): { data: Buffer | undefined, offset: number } {\n    // See if we have data that needs to be resent\n    if (this._outgoingDataToRetry.length > 0) {\n      const toSend = this._outgoingDataToRetry[0]\n      if (toSend.data.length > size) {\n        const data = toSend.data.slice(0, size)\n        const offset = toSend.offset\n        toSend.data = toSend.data.slice(size)\n        toSend.offset = toSend.offset + size\n        return { data, offset }\n      } else {\n        return this._outgoingDataToRetry.shift()!\n      }\n    }\n\n    // Send new data if the remote can receive more data\n    const maxBytes = Math.min(size, this._remoteMaxOffset - this.outgoingOffset)\n    const offset = this.outgoingOffset\n    const data = this._outgoingData.read(maxBytes)\n    if (data && data.length > 0) {\n      this.outgoingOffset = this.outgoingOffset += data.length\n      this.debug(`${data.length} bytes taken from the outgoing data queue`)\n    }\n    return { data, offset }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _resendOutgoingData (data: Buffer, offset: number) {\n    this.debug(`re-queuing ${data.length} bytes of data starting at offset ${offset}`)\n    this._outgoingDataToRetry.push({ data, offset })\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _isDataBlocked (): number | undefined {\n    if (this._remoteMaxOffset < this.outgoingOffset + this._outgoingData.byteLength()) {\n      return this.outgoingOffset + this._outgoingData.byteLength()\n    }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _getOutgoingOffsets (): { current: number, max: number } {\n    return {\n      current: this.outgoingOffset,\n      max: this.outgoingOffset + this._outgoingData.byteLength()\n    }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _getIncomingOffsets (): { max: number, current: number, maxAcceptable: number } {\n    return {\n      max: this._incomingData.maxOffset,\n      current: this._incomingData.readOffset,\n      maxAcceptable: this._incomingData.readOffset + this.readableHighWaterMark - this.readableLength\n    }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _pushIncomingData (data: Buffer, offset: number) {\n    this._incomingData.push(data, offset)\n\n    this._read(this.readableHighWaterMark - this.readableLength)\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _remoteEnded (err?: Error): void {\n    this.debug('remote closed stream')\n    this._remoteSentEnd = true\n    this._remoteClosed = true\n    if (err) {\n      this.destroy(err)\n    } else {\n      this.push(null)\n      this.end()\n    }\n  }\n\n  protected safeEmit (event: string, ...args: any[]) {\n    try {\n      args.unshift(event)\n      this.emit.apply(this, args)\n    } catch (err) {\n      this.debug(`error in ${event} handler:`, err)\n    }\n  }\n}\n"]}