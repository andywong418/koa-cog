/// <reference types="node" />
/// <reference types="debug" />
import { EventEmitter } from 'events';
import * as Debug from 'debug';
import { Connection, ConnectionOpts } from './connection';
import { Plugin } from './util/plugin-interface';
export interface CreateConnectionOpts extends ConnectionOpts {
    destinationAccount: string;
    sharedSecret: Buffer;
}
export declare function createConnection(opts: CreateConnectionOpts): Promise<Connection>;
export interface ServerOpts extends ConnectionOpts {
    serverSecret?: Buffer;
}
export declare class Server extends EventEmitter {
    protected serverSecret: Buffer;
    protected plugin: Plugin;
    protected sourceAccount: string;
    protected connections: {
        [key: string]: Connection;
    };
    protected debug: Debug.IDebugger;
    protected enablePadding?: boolean;
    protected connected: boolean;
    protected connectionOpts: ConnectionOpts;
    constructor(opts?: ServerOpts);
    listen(): Promise<void>;
    acceptConnection(): Promise<Connection>;
    generateAddressAndSecret(connectionTag?: string): {
        destinationAccount: string;
        sharedSecret: Buffer;
    };
    protected handleData(data: Buffer): Promise<Buffer>;
}
export declare function createServer(opts: ServerOpts): Promise<Server>;
