{"version":3,"file":"reader.js","sourceRoot":"","sources":["../../../src/lib/reader.ts"],"names":[],"mappings":"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","sourcesContent":["import UnderflowError from '../errors/underflow-error'\nimport ParseError from '../errors/parse-error'\nimport BigNumber from 'bignumber.js'\nimport { bufferToBigNumber } from './util'\n\nBigNumber.config({\n  EXPONENTIAL_AT: [-7, 50]\n})\n\nclass Reader {\n  // Most significant bit in a byte\n  static HIGH_BIT = 0x80\n\n  // Other bits in a byte\n  static LOWER_SEVEN_BITS = 0x7F\n\n  buffer: Buffer\n  cursor: number\n  bookmarks: number[]\n\n  constructor (buffer: Buffer) {\n    this.buffer = buffer\n    this.cursor = 0\n    this.bookmarks = []\n  }\n\n  /**\n   * Create a Reader from a source of bytes.\n   *\n   * Currently, this method only allows the creation of a Reader from a Buffer.\n   *\n   * If the object provided is already a Reader, that reader is returned as is.\n   *\n   * @param {Reader|Buffer} source Source of binary data.\n   * @return {Reader} Instance of Reader\n   */\n  static from (source: Buffer | Reader): Reader {\n    if (Buffer.isBuffer(source)) {\n      return new Reader(source)\n    } else if (source instanceof Reader) {\n      return new Reader(source.buffer.slice(source.cursor))\n    } else {\n      throw new Error('Reader must be given a Buffer')\n    }\n  }\n\n  /**\n   * Store the current cursor position on a stack.\n   */\n  bookmark (): void {\n    this.bookmarks.push(this.cursor)\n  }\n\n  /**\n   * Pop the most recently bookmarked cursor position off the stack.\n   */\n  restore (): void {\n    if (!this.bookmarks.length) {\n      throw new Error('Cannot restore bookmark when no bookmark set')\n    }\n    this.cursor = this.bookmarks.pop()!\n  }\n\n  /**\n   * Ensure this number of bytes is buffered.\n   *\n   * This method checks that the given number of bytes is buffered and available\n   * for reading. If insufficient bytes are available, the method throws an\n   * `UnderflowError`.\n   *\n   * @param {number} bytes Number of bytes that should be available.\n   */\n  ensureAvailable (bytes: number): void {\n    if (this.buffer.length < (this.cursor + bytes)) {\n      throw new UnderflowError('Tried to read ' + bytes + ' bytes, but only ' +\n        (this.buffer.length - this.cursor) + ' bytes available')\n    }\n  }\n\n  /**\n   * Read a fixed-length unsigned big-endian integer.\n   *\n   * @param {number} length Length of the integer in bytes.\n   */\n  readUIntBigNum (length: number): BigNumber {\n    const value = this.peekUIntBigNum(length)\n    this.cursor += length\n    return value\n  }\n\n  /**\n   * Read a fixed-length unsigned big-endian integer as a string.\n   *\n   * @param {number} length Length of the integer in bytes.\n   */\n  readUInt (length: number): string {\n    return this.readUIntBigNum(length).toString()\n  }\n\n  /**\n   * Look at a fixed-length unsigned integer, but don't advance the cursor.\n   *\n   * @param {number} length Length of the integer in bytes.\n   */\n  peekUIntBigNum (length: number): BigNumber {\n    if (length === 0) {\n      return new BigNumber(0)\n    } else if (length < 0) {\n      throw new Error('Tried to read integer with negative length (provided: ' +\n        length + ')')\n    } else if (length > 8) {\n      throw new Error('UInts longer than 8 bytes must be encoded as VarUInts')\n    }\n\n    return bufferToBigNumber(this.peek(length))\n  }\n\n  /**\n   * Look at a fixed-length unsigned integer as a string, but don't advance the cursor.\n   *\n   * @param {number} length Length of the integer in bytes.\n   */\n  peekUInt (length: number): string {\n    return this.peekUIntBigNum(length).toString()\n  }\n\n  /**\n   * Advance cursor by length bytes.\n   */\n  skipUInt (length: number): void {\n    this.skip(length)\n  }\n\n  /**\n   * Read a fixed-length signed big-endian integer.\n   *\n   * @param {number} length Length of the integer in bytes.\n   */\n  readIntBigNum (length: number): BigNumber {\n    const value = this.peekIntBigNum(length)\n    this.cursor += length\n    return value\n  }\n\n  /**\n   * Read a fixed-length signed big-endian integer as a string.\n   *\n   * @param {number} length Length of the integer in bytes.\n   */\n  readInt (length: number): string {\n    return this.readIntBigNum(length).toString()\n  }\n\n  /**\n   * Look at a fixed-length signed integer, but don't advance the cursor.\n   *\n   * @param {number} length Length of the integer in bytes.\n   */\n  peekIntBigNum (length: number): BigNumber {\n    if (length === 0) {\n      return new BigNumber(0)\n    } else if (length < 0) {\n      throw new Error('Tried to read integer with negative length (provided: ' +\n        length + ')')\n    } else if (length > 8) {\n      throw new Error('Ints longer than 8 bytes must be encoded as VarInts')\n    }\n\n    const value = bufferToBigNumber(this.peek(length))\n\n    const maxValue = new BigNumber(256).exponentiatedBy(length).minus(1)\n    if (value.isLessThan(maxValue.dividedBy(2))) {\n      return value\n    } else {\n      return value.minus(maxValue).minus(1)\n    }\n  }\n\n  /**\n   * Look at a fixed-length signed integer as a string, but don't advance the cursor.\n   *\n   * @param {number} length Length of the integer in bytes.\n   */\n  peekInt (length: number): string {\n    return this.peekIntBigNum(length).toString()\n  }\n\n  /**\n   * Advance cursor by length bytes.\n   */\n  skipInt (length: number): void {\n    this.skip(length)\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position and advance the cursor.\n   */\n  readVarUIntBigNum (): BigNumber {\n    const buffer = this.readVarOctetString()\n    if (buffer.length === 0) {\n      throw new ParseError('UInt of length 0 is invalid')\n    }\n\n    return bufferToBigNumber(buffer)\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position as a string and advance the cursor.\n   */\n  readVarUInt (): string {\n    return this.readVarUIntBigNum().toString()\n  }\n\n  /**\n   * Read the next variable-length unsigned integer, but don't advance the cursor.\n   */\n  peekVarUIntBigNum (): BigNumber {\n    this.bookmark()\n    const value = this.readVarUIntBigNum()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Read the next variable-length unsigned integer, but don't advance the cursor.\n   */\n  peekVarUInt (): string {\n    return this.peekVarUIntBigNum().toString()\n  }\n\n  /**\n   * Skip past the variable-length unsigned integer at the cursor position.\n   *\n   * Since variable integers are encoded the same way as octet strings, this\n   * method is equivalent to skipVarOctetString.\n   */\n  skipVarUInt (): void {\n    this.skipVarOctetString()\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position and advance the cursor.\n   */\n  readVarIntBigNum (): BigNumber {\n    const buffer = this.readVarOctetString()\n\n    if (buffer.length === 0) {\n      throw new ParseError('Int of length 0 is invalid')\n    }\n\n    const value = bufferToBigNumber(buffer)\n\n    const maxValue = new BigNumber(256).exponentiatedBy(buffer.length).minus(1)\n    if (value.isLessThan(maxValue.dividedBy(2))) {\n      return value\n    } else {\n      return value.minus(maxValue).minus(1)\n    }\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position as a string and advance the cursor.\n   */\n  readVarInt (): string {\n    return this.readVarIntBigNum().toString()\n  }\n\n  /**\n   * Read the next variable-length unsigned integer, but don't advance the cursor.\n   */\n  peekVarIntBigNum (): BigNumber {\n    this.bookmark()\n    const value = this.readVarIntBigNum()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Read the next variable-length unsigned integer as a string, but don't advance the cursor.\n   */\n  peekVarInt (): string {\n    return this.peekVarIntBigNum().toString()\n  }\n\n  /**\n   * Skip past the variable-length signed integer at the cursor position.\n   *\n   * Since variable integers are encoded the same way as octet strings, this\n   * method is equivalent to skipVarOctetString.\n   */\n  skipVarInt (): void {\n    this.skipVarOctetString()\n  }\n\n  /**\n   * Read a fixed-length octet string.\n   *\n   * @param {number} length Length of the octet string.\n   */\n  readOctetString (length: number): Buffer {\n    return this.read(length)\n  }\n\n  /**\n   * Peek at a fixed length octet string.\n   *\n   * @param {number} length Length of the octet string.\n   */\n  peekOctetString (length: number): Buffer {\n    return this.peek(length)\n  }\n\n  /**\n   * Skip a fixed length octet string.\n   *\n   * @param {number} length Length of the octet string.\n   */\n  skipOctetString (length: number): void {\n    return this.skip(length)\n  }\n\n  /**\n   * Read a length prefix.\n   *\n   * You shouldn't need this. Length prefixes are used internally by\n   * variable-length octet strings and integers.\n   */\n  readLengthPrefix (): number {\n    const length = this.readUInt8BigNum().toNumber()\n\n    if (length & Reader.HIGH_BIT) {\n      const lengthPrefixLength = length & Reader.LOWER_SEVEN_BITS\n      const actualLength = this.readUIntBigNum(lengthPrefixLength).toNumber()\n\n      // Reject lengths that could have been encoded with a shorter prefix\n      const minLength = Math.max(128, 1 << ((lengthPrefixLength - 1) * 8))\n      if (actualLength < minLength) {\n        throw new ParseError('Length prefix encoding is not canonical: ' +\n          actualLength + ' encoded in ' + lengthPrefixLength + ' bytes')\n      }\n\n      return actualLength\n    }\n\n    return length\n  }\n\n  /**\n   * Read a variable-length octet string.\n   *\n   * A variable-length octet string is a length-prefixed set of arbitrary bytes.\n   */\n  readVarOctetString (): Buffer {\n    const length = this.readLengthPrefix()\n\n    return this.read(length)\n  }\n\n  /**\n   * Read a variable-length buffer, but do not advance cursor position.\n   */\n  peekVarOctetString (): Buffer {\n    this.bookmark()\n    const value = this.readVarOctetString()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Skip a variable-length buffer.\n   */\n  skipVarOctetString (): void {\n    const length = this.readLengthPrefix()\n\n    this.skip(length)\n  }\n\n  /**\n   * Read a given number of bytes.\n   *\n   * Returns this many bytes starting at the cursor position and advances the\n   * cursor.\n   *\n   * @param {number} bytes Number of bytes to read.\n   */\n  read (bytes: number): Buffer {\n    this.ensureAvailable(bytes)\n\n    const value = this.buffer.slice(this.cursor, this.cursor + bytes)\n    this.cursor += bytes\n\n    return value\n  }\n\n  /**\n   * Read bytes, but do not advance cursor.\n   *\n   * @param {number} bytes Number of bytes to read.\n   */\n  peek (bytes: number): Buffer {\n    this.ensureAvailable(bytes)\n\n    return this.buffer.slice(this.cursor, this.cursor + bytes)\n  }\n\n  /**\n   * Skip a number of bytes.\n   *\n   * Advances the cursor by this many bytes.\n   *\n   * @param {number} bytes Number of bytes to advance the cursor by.\n   */\n  skip (bytes: number): void {\n    this.ensureAvailable(bytes)\n\n    this.cursor += bytes\n  }\n}\n\ninterface Reader {\n  readUInt8 (): string\n  readUInt16 (): string\n  readUInt32 (): string\n  readUInt64 (): string\n  peekUInt8 (): string\n  peekUInt16 (): string\n  peekUInt32 (): string\n  peekUInt64 (): string\n  skipUInt8 (): void\n  skipUInt16 (): void\n  skipUInt32 (): void\n  skipUInt64 (): void\n  readInt8 (): string\n  readInt16 (): string\n  readInt32 (): string\n  readInt64 (): string\n  peekInt8 (): string\n  peekInt16 (): string\n  peekInt32 (): string\n  peekInt64 (): string\n  skipInt8 (): void\n  skipInt16 (): void\n  skipInt32 (): void\n  skipInt64 (): void\n  readUInt8BigNum (): BigNumber\n  readUInt16BigNum (): BigNumber\n  readUInt32BigNum (): BigNumber\n  readUInt64BigNum (): BigNumber\n  peekUInt8BigNum (): BigNumber\n  peekUInt16BigNum (): BigNumber\n  peekUInt32BigNum (): BigNumber\n  peekUInt6BigNum4 (): BigNumber\n  readInt8BigNum (): BigNumber\n  readInt16BigNum (): BigNumber\n  readInt32BigNum (): BigNumber\n  readInt64BigNum (): BigNumber\n  peekInt8BigNum (): BigNumber\n  peekInt16BigNum (): BigNumber\n  peekInt32BigNum (): BigNumber\n  peekInt64BigNum (): BigNumber\n}\n\n// Create {read,peek,skip}UInt{8,16,32} shortcuts\n['read', 'peek', 'skip'].forEach((verb) => {\n  [1, 2, 4, 8].forEach((bytes) => {\n    Reader.prototype[verb + 'UInt' + bytes * 8] = function () {\n      return this[verb + 'UInt'](bytes)\n    }\n\n    Reader.prototype[verb + 'Int' + bytes * 8] = function () {\n      return this[verb + 'Int'](bytes)\n    }\n\n    Reader.prototype[verb + 'UInt' + bytes * 8 + 'BigNum'] = function () {\n      return this[verb + 'UIntBigNum'](bytes)\n    }\n\n    Reader.prototype[verb + 'Int' + bytes * 8 + 'BigNum'] = function () {\n      return this[verb + 'IntBigNum'](bytes)\n    }\n  })\n})\n\nexport default Reader\n"]}