{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/lib/util.ts"],"names":[],"mappings":";;AAAA,6CAAoC;AAEpC,mBAA2B,KAAU;IACnC,EAAE,CAAC,CAAC,sBAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE;eAClB,KAAK,CAAC,SAAS,EAAE,CAAA;IACxB,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ;eAC3B,OAAO,KAAK,KAAK,UAAU;eAC3B,QAAQ,CAAC,KAAK,CAAC;eACf,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,CAAA;IAClC,CAAC;AACH,CAAC;AAVD,8BAUC;AAED,2BAAmC,MAAc;IAC/C,MAAM,CAAC,MAAM,CAAC,MAAM,CAClB,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAA1B,CAA0B,EAC1C,IAAI,sBAAS,CAAC,CAAC,CAAC,CACjB,CAAA;AACH,CAAC;AALD,8CAKC;AAED,2BAAmC,KAAgB,EAAE,MAAe;IAClE,IAAM,aAAa,GAAG,CAAC,MAAM,KAAK,SAAS,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAA;IAC/F,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA;IAC1C,IAAI,GAAG,GAAG,KAAK,CAAA;IACf,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC5C,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAA;QAChD,GAAG,GAAG,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAA;IACnC,CAAC;IACD,MAAM,CAAC,MAAM,CAAA;AACf,CAAC;AATD,8CASC","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport function isInteger (value: any) {\n  if (BigNumber.isBigNumber(value)) {\n    return value.isFinite()\n      && value.isInteger()\n  } else {\n    return typeof value !== 'object'\n      && typeof value !== 'function'\n      && isFinite(value)\n      && Math.floor(value) === value\n  }\n}\n\nexport function bufferToBigNumber (buffer: Buffer): BigNumber {\n  return buffer.reduce(\n    (sum, value) => sum.times(256).plus(value),\n    new BigNumber(0)\n  )\n}\n\nexport function bigNumberToBuffer (value: BigNumber, length?: number): Buffer {\n  const lengthOfValue = (length !== undefined ? length : Math.ceil(value.toString(2).length / 8))\n  const buffer = Buffer.alloc(lengthOfValue)\n  let big = value\n  for (let i = buffer.length - 1; i >= 0; i--) {\n    buffer.writeUInt8(big.modulo(256).toNumber(), i)\n    big = big.dividedToIntegerBy(256)\n  }\n  return buffer\n}\n"]}